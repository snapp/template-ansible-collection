---

# See: https://github.com/ansible-collections/collection_template/blob/main/.github/workflows/ansible-test.yml

# TODO: Verify GitHub Ansible Test Pipeline Configuration
# 1. If you don't have unit tests, remove that section.
# 2. If your collection depends on other collections ensure they are installed,
#    add them to the "test-deps" input.
# 3. For the comprehensive list of the inputs supported by the
#    ansible-community/ansible-test-gh-action GitHub Action, see
#    https://github.com/marketplace/actions/ansible-test.
# 4. If you want to prevent merging PRs that do not pass all tests,
#    make sure to add the "check" job to your repository branch
#    protection once this workflow is added.
#    It is also possible to tweak which jobs are allowed to fail. See
#    https://github.com/marketplace/actions/alls-green#gotchas for more detail.
# 5. If you need help please ask in #ansible-community on the Libera.chat IRC
#    network.
{% raw %}
name: ansible-test
on:
  # Run ansible-test against all pushes (direct commits, also merged PRs), Pull Requests
  push:
    branches:
      - main
      - stable-*
  pull_request:
  # Run once per day to ensure that even if there haven't been commits that we are still testing against latest
  # version of ansible-test for each ansible version
  schedule:
    - cron: '0 4 * * *'

concurrency:
  group: >-
    ${{ github.workflow }}-${{
      github.event.pull_request.number || github.sha
    }}
  cancel-in-progress: true

jobs:

  ###
  # Sanity Checks (REQUIRED)
  #
  # https://docs.ansible.com/ansible/latest/dev_guide/testing_sanity.html
  sanity:
    name: Sanity (Ⓐ${{ matrix.ansible }})
    strategy:
      matrix:
        ansible:
          # TODO: Verify the versions of Ansible to run sanity checks agains
          #
          # It's important that Sanity is tested against all stable-X.Y branches
          # Testing against `devel` may fail as new tests are added.
          # An alternative to `devel` is the `milestone` branch with
          # gets synchronized with `devel` every few weeks and therefore
          # tends to be a more stable target. Be aware that it is not updated
          # around creation of a new stable branch, this might cause a problem
          # that two different versions of ansible-test use the same sanity test
          # ignore.txt file.
          - stable-2.14
          - stable-2.15
          - devel
          # - milestone
    runs-on: 'ubuntu-latest'
    steps:
      # Run sanity tests inside a Docker container.
      # The docker container has all the pinned dependencies that are
      # required and all Python versions Ansible supports.
      - name: Perform sanity testing
        # See the documentation for the following GitHub action on
        # https://github.com/ansible-community/ansible-test-gh-action/blob/main/README.md
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          testing-type: sanity
          # OPTIONAL If your sanity tests require code
          # from other collections, install them like this
          # test-deps: >-
          #   ansible.netcommon
          #   ansible.utils
          # OPTIONAL If set to true, will test only against changed files,
          # which should improve CI performance. See limitations on
          # https://github.com/ansible-community/ansible-test-gh-action#pull-request-change-detection
          pull-request-change-detection: true

  ###
  # Unit Tests (OPTIONAL)
  #
  # https://docs.ansible.com/ansible/latest/dev_guide/testing_units.html
  units:
    runs-on: 'ubuntu-latest'
    name: Unit ( Ⓐ${{ matrix.ansible }} )
    strategy:
      # As soon as the first unit test fails, cancel the others to free up the CI queue
      fail-fast: true
      matrix:
        ansible:
          # TODO: Verify the versions of Ansible to run unit tests against
          - stable-2.14
          - stable-2.15
          - devel
          # - milestone

    steps:
      - name: >-
          Perform unit testing against
          Ansible version ${{ matrix.ansible }}
        # See the documentation for the following GitHub action on
        # https://github.com/ansible-community/ansible-test-gh-action/blob/main/README.md
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          testing-type: units
          # OPTIONAL If your unit tests require code
          # from other collections, install them like this
          test-deps: >-
            ansible.netcommon
            ansible.utils
          # OPTIONAL If set to true, will test only against changed files,
          # which should improve CI performance. See limitations on
          # https://github.com/ansible-community/ansible-test-gh-action#pull-request-change-detection
          pull-request-change-detection: true

  ###
  # Integration Tests (RECOMMENDED)
  #
  # https://docs.ansible.com/ansible/latest/dev_guide/testing_integration.html
  # If the application you are testing is available as a docker container and you want to test
  # multiple versions see the following for an example:
  # https://github.com/ansible-collections/community.zabbix/tree/master/.github/workflows
  integration:
    runs-on: 'ubuntu-latest'
    name: Integration ( Ⓐ${{ matrix.ansible }} + py${{ matrix.python }} )
    strategy:
      fail-fast: false
      matrix:
        ansible:
          - devel
        # - milestone
        python:
          # TODO: Verify the versions of Python to run integration tests against
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        include:
          # TODO: Verify the Python / Ansible version matrix to run integration tests against
          - ansible: stable-2.14
            python: '3.8'
          - ansible: stable-2.14
            python: '3.9'
          - ansible: stable-2.14
            python: '3.10'
          - ansible: stable-2.14
            python: '3.11'
          - ansible: stable-2.15
            python: '3.8'
          - ansible: stable-2.15
            python: '3.9'
          - ansible: stable-2.15
            python: '3.10'
          - ansible: stable-2.15
            python: '3.11'

    steps:
      - name: >-
          Perform integration testing against
          Ansible version ${{ matrix.ansible }}
          under Python ${{ matrix.python }}
        # https://github.com/ansible-community/ansible-test-gh-action/blob/main/README.md
        uses: ansible-community/ansible-test-gh-action@release/v1
        with:
          ansible-core-version: ${{ matrix.ansible }}
          # OPTIONAL command to run before invoking `ansible-test integration`
          # pre-test-cmd:
          target-python-version: ${{ matrix.python }}
          testing-type: integration
          # OPTIONAL If your integration tests require code
          # from other collections, install them like this
          test-deps: ansible.netcommon
          # OPTIONAL If set to true, will test only against changed files,
          # which should improve CI performance. See limitations on
          # https://github.com/ansible-community/ansible-test-gh-action#pull-request-change-detection
          pull-request-change-detection: true


  # This job does nothing and is only used for the branch protection
  # or multi-stage CI jobs, like making sure that all tests pass before
  # a publishing job is started.
  check:

    if: always()

    needs:
      - sanity
      - units
      - integration

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}{% endraw %}
